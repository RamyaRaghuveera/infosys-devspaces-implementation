apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  creationTimestamp: '2023-04-27T15:22:46Z'
  generation: 1
  managedFields:
    - apiVersion: tekton.dev/v1beta1
      fieldsType: FieldsV1
      fieldsV1:
        'f:spec':
          .: {}
          'f:description': {}
          'f:params': {}
          'f:results': {}
          'f:steps': {}
          'f:volumes': {}
          'f:workspaces': {}
      manager: Mozilla
      operation: Update
      time: '2022-12-05T10:54:05Z'
  name: buildah-custom
  namespace: cicd
  resourceVersion: '4067661'
  uid: 909e739f-d3e9-40b9-969c-6ba552c8d503
spec:
  description: >-
    Buildah task builds source into a container image and then pushes it to a
    container registry.

    Buildah Task builds source into a container image using Project Atomic's
    Buildah build tool.It uses Buildah's support for building from Dockerfiles,
    using its buildah bud command.This command executes the directives in the
    Dockerfile to assemble a container image, then pushes that image to a
    container registry.
  params:
    - description: Reference of the image buildah will produce.
      name: IMAGE
      type: string
    - default: >-
        registry.redhat.io/rhel8/buildah@sha256:0a86ecbdfbe86e9d225b7fe4b090a0dd6d323f8afdfdf2bd933ff223ddb53320
      description: The location of the buildah builder image.
      name: BUILDER_IMAGE
      type: string
    - default: vfs
      description: Set buildah storage driver
      name: STORAGE_DRIVER
      type: string
    - default: ./Dockerfile
      description: Path to the Dockerfile to build.
      name: DOCKERFILE
      type: string
    - default: .
      description: Path to the directory to use as context.
      name: CONTEXT
      type: string
    - default: 'true'
      description: >-
        Verify the TLS on the registry endpoint (for push/pull to a non-TLS
        registry)
      name: TLSVERIFY
      type: string
    - default: docker #oci
      description: 'The format of the built container, oci or docker'
      name: FORMAT
      type: string
    - default: latest
      description: Image TAG
      name: IMAGE_TAG
      type: string
    - default: ''
      description: Extra parameters passed for the build command when building images.
      name: BUILD_EXTRA_ARGS
      type: string
    - default: ''
      description: Extra parameters passed for the push command when pushing images.
      name: PUSH_EXTRA_ARGS
      type: string
    - default: 'false'
      description: Skip pushing the built image
      name: SKIP_PUSH
      type: string
    - default: 'http://148.64.4.164:8080'
      name: httpProxy
      type: string
    - default: 'http://148.64.4.164:8080'
      name: httpsProxy
      type: string
    - default: rrbg.jfrog.io/docker-local
      name: JFROG_URL
      type: string
    - default: mockproject
      name: APP_NAME
      type: string
    - default: 'image-registry.openshift-image-registry.svc,.apps.cloud.infyitapps.local'
      name: noProxy
      type: string
    - default: 'image-registry.openshift-image-registry.svc:5000'
      name: image-server
      type: string
    - name: image-namespace
      type: string
  results:
    - description: Digest of the image just built.
      name: IMAGE_DIGEST
      type: string
  steps:
    - name: git-clone
      image: quay.io/ibmgaragecloud/alpine-git
      env:
        - name: GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: password
              optional: true
        - name: GIT_USERNAME
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: username
              optional: true
      script: |
        set +x
        if [[ -n "${GIT_USERNAME}" ]] && [[ -n "${GIT_PASSWORD}" ]]; then
            git clone "$(echo $(params.git-url) | awk -F '://' '{print $1}')://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.git-url) | awk -F '://' '{print $2}')" $(params.source-dir)
        else
            set -x
            git clone $(params.git-url) $(params.source-dir)
        fi
        set -x
        cd $(params.source-dir)
        git checkout $(params.git-revision)

    - image: $(params.BUILDER_IMAGE)
      name: build-and-push
      resources: {}
      script: >

        


        export http_proxy=$(params.httpProxy)   


        export https_proxy=$(params.httpsProxy) 

        export no_proxy=$(params.noProxy)
        APP_IMAGE="$(params.image-server)/$(params.image-namespace)/$(params.IMAGE):$(params.IMAGE_TAG)"

        buildah --storage-driver=$(params.STORAGE_DRIVER) bud \
          $(params.BUILD_EXTRA_ARGS) --format=$(params.FORMAT) \
          --tls-verify=$(params.TLSVERIFY) --no-cache \
          -f $(params.DOCKERFILE) -t ${APP_IMAGE} $(params.CONTEXT)

        [[ "$(params.SKIP_PUSH)" == "true" ]] && echo "Push skipped" && exit 0

        buildah --storage-driver=$(params.STORAGE_DRIVER) push \
          $(params.PUSH_EXTRA_ARGS) --tls-verify=$(params.TLSVERIFY) \
          --digestfile $(workspaces.source.path)/image-digest $(params.IMAGE):$(params.IMAGE_TAG) \
          docker://$(params.IMAGE):$(params.IMAGE_TAG)
        cat $(workspaces.source.path)/image-digest | tee
        /tekton/results/IMAGE_DIGEST
      securityContext:
        capabilities:
          add:
            - SETFCAP
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      workingDir: $(workspaces.source.path)
  volumes:
    - emptyDir: {}
      name: varlibcontainers
  workspaces:
    - name: source
